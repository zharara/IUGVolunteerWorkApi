// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VolunteerWorkApi.Data;

#nullable disable

namespace VolunteerWorkApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230319200852_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InterestStudent", b =>
                {
                    b.Property<long>("InterestsId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentsId")
                        .HasColumnType("bigint");

                    b.HasKey("InterestsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("InterestStudent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SkillStudent", b =>
                {
                    b.Property<long>("SkillsId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentsId")
                        .HasColumnType("bigint");

                    b.HasKey("SkillsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("SkillStudent");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Announcement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManagementAnnouncement")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrganizationAnnouncement")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("VolunteerProgramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("VolunteerProgramId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FCMToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("CASE WHEN [MiddleName] IS NULL THEN [FirstName] + ' ' + [LastName] ELSE [FirstName] + ' ' + [MiddleName] + ' ' + [LastName] END");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<long?>("ProfilePictureId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfilePictureId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Conversation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("User1Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("User2Id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Interest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("VolunteerOpportunityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VolunteerOpportunityId");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SenderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Page")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.SavedFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("VolunteerProgramActivityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerProgramActivityId");

                    b.ToTable("SavedFiles");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Skill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("VolunteerOpportunityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VolunteerOpportunityId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.StudentApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ManagementRejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrganizationRejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusForManagement")
                        .HasColumnType("int");

                    b.Property<int>("StatusForOrganization")
                        .HasColumnType("int");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubmittedFileId")
                        .HasColumnType("bigint");

                    b.Property<string>("TextInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("VolunteerOpportunityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubmittedFileId");

                    b.HasIndex("VolunteerOpportunityId");

                    b.ToTable("StudentApplications");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.TempFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TempFiles");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerOpportunity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ActualProgramEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActualProgramStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AnnouncementEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApplicantQualifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequirementNeededAsFile")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequirementNeededAsText")
                        .HasColumnType("bit");

                    b.Property<long?>("LogoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NatureOfWorkOrActivities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReceiveApplicationsEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequiredVolunteerStudentsNumber")
                        .HasColumnType("int");

                    b.Property<string>("RequirementFileAllowedTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequirementFileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("RequirementFileMaxAllowedSize")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LogoId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("VolunteerOpportunities");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternalProgram")
                        .HasColumnType("bit");

                    b.Property<long?>("LogoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LogoId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("VolunteerPrograms");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerProgramActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VolunteerProgramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerProgramId");

                    b.ToTable("VolunteerProgramActivities");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerProgramGalleryPhoto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PhotoId")
                        .HasColumnType("bigint");

                    b.Property<long>("VolunteerProgramId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VolunteerStudentUploaderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("VolunteerProgramId");

                    b.HasIndex("VolunteerStudentUploaderId");

                    b.ToTable("VolunteerProgramGalleryPhotos");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerProgramTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VolunteerProgramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerProgramId");

                    b.ToTable("VolunteerProgramTasks");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerProgramWorkDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VolunteerProgramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerProgramId");

                    b.ToTable("VolunteerProgramWorkDays");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerStudent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("FinalGrade")
                        .HasColumnType("float");

                    b.Property<string>("FinalGradeNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("OrgAssessmentGrade")
                        .HasColumnType("float");

                    b.Property<string>("OrgAssessmentGradeNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("VolunteerProgramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("VolunteerProgramId");

                    b.ToTable("VolunteerStudents");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerStudentActivityAttendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAttended")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("VolunteerProgramActivityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VolunteerStudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerProgramActivityId");

                    b.HasIndex("VolunteerStudentId");

                    b.ToTable("VolunteerStudentActivityAttendances");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerStudentTaskAccomplish", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccomplished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<long>("VolunteerProgramTaskId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VolunteerStudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerProgramTaskId");

                    b.HasIndex("VolunteerStudentId");

                    b.ToTable("VolunteerStudentTaskAccomplishes");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerStudentWorkAttendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAttended")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("VolunteerProgramWorkDayId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VolunteerStudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerProgramWorkDayId");

                    b.HasIndex("VolunteerStudentId");

                    b.ToTable("VolunteerStudentWorkAttendances");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.ManagementEmployee", b =>
                {
                    b.HasBaseType("VolunteerWorkApi.Entities.ApplicationUser");

                    b.HasDiscriminator().HasValue("ManagementEmployee");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Organization", b =>
                {
                    b.HasBaseType("VolunteerWorkApi.Entities.ApplicationUser");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldOfWork")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vision")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Organization");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Student", b =>
                {
                    b.HasBaseType("VolunteerWorkApi.Entities.ApplicationUser");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversityIdNumber")
                        .HasColumnType("int");

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.Property("Address")
                                .HasColumnName("Student_Address");
                        });

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("InterestStudent", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.Interest", null)
                        .WithMany()
                        .HasForeignKey("InterestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolunteerWorkApi.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolunteerWorkApi.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillStudent", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolunteerWorkApi.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Announcement", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.SavedFile", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("VolunteerWorkApi.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("VolunteerWorkApi.Entities.VolunteerProgram", "VolunteerProgram")
                        .WithMany()
                        .HasForeignKey("VolunteerProgramId");

                    b.Navigation("Image");

                    b.Navigation("Organization");

                    b.Navigation("VolunteerProgram");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.ApplicationUser", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.SavedFile", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureId");

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Conversation", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.ApplicationUser", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id");

                    b.HasOne("VolunteerWorkApi.Entities.ApplicationUser", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Interest", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.Category", "Category")
                        .WithMany("Interests")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolunteerWorkApi.Entities.VolunteerOpportunity", null)
                        .WithMany("VolunteerInterests")
                        .HasForeignKey("VolunteerOpportunityId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Message", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolunteerWorkApi.Entities.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("VolunteerWorkApi.Entities.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Conversation");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Notification", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.SavedFile", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.VolunteerProgramActivity", null)
                        .WithMany("Photos")
                        .HasForeignKey("VolunteerProgramActivityId");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Skill", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.Category", "Category")
                        .WithMany("Skills")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolunteerWorkApi.Entities.VolunteerOpportunity", null)
                        .WithMany("VolunteerSkills")
                        .HasForeignKey("VolunteerOpportunityId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.StudentApplication", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolunteerWorkApi.Entities.SavedFile", "SubmittedFile")
                        .WithMany()
                        .HasForeignKey("SubmittedFileId");

                    b.HasOne("VolunteerWorkApi.Entities.VolunteerOpportunity", "VolunteerOpportunity")
                        .WithMany()
                        .HasForeignKey("VolunteerOpportunityId");

                    b.Navigation("Student");

                    b.Navigation("SubmittedFile");

                    b.Navigation("VolunteerOpportunity");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerOpportunity", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.Category", "Category")
                        .WithMany("VolunteerOpportunities")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolunteerWorkApi.Entities.SavedFile", "Logo")
                        .WithMany()
                        .HasForeignKey("LogoId");

                    b.HasOne("VolunteerWorkApi.Entities.Organization", "Organization")
                        .WithMany("VolunteerOpportunities")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Logo");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerProgram", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.Category", "Category")
                        .WithMany("VolunteerPrograms")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolunteerWorkApi.Entities.SavedFile", "Logo")
                        .WithMany()
                        .HasForeignKey("LogoId");

                    b.HasOne("VolunteerWorkApi.Entities.Organization", "Organization")
                        .WithMany("VolunteerPrograms")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Category");

                    b.Navigation("Logo");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerProgramActivity", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.VolunteerProgram", "VolunteerProgram")
                        .WithMany("VolunteerProgramActivities")
                        .HasForeignKey("VolunteerProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VolunteerProgram");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerProgramGalleryPhoto", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.SavedFile", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolunteerWorkApi.Entities.VolunteerProgram", "VolunteerProgram")
                        .WithMany("VolunteerProgramGalleryPhotos")
                        .HasForeignKey("VolunteerProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolunteerWorkApi.Entities.VolunteerStudent", "VolunteerStudentUploader")
                        .WithMany()
                        .HasForeignKey("VolunteerStudentUploaderId");

                    b.Navigation("Photo");

                    b.Navigation("VolunteerProgram");

                    b.Navigation("VolunteerStudentUploader");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerProgramTask", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.VolunteerProgram", "VolunteerProgram")
                        .WithMany("VolunteerProgramTasks")
                        .HasForeignKey("VolunteerProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VolunteerProgram");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerProgramWorkDay", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.VolunteerProgram", "VolunteerProgram")
                        .WithMany("VolunteerWorkDays")
                        .HasForeignKey("VolunteerProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VolunteerProgram");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerStudent", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolunteerWorkApi.Entities.VolunteerProgram", "VolunteerProgram")
                        .WithMany("VolunteerStudents")
                        .HasForeignKey("VolunteerProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("VolunteerProgram");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerStudentActivityAttendance", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.VolunteerProgramActivity", "VolunteerProgramActivity")
                        .WithMany()
                        .HasForeignKey("VolunteerProgramActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolunteerWorkApi.Entities.VolunteerStudent", "VolunteerStudent")
                        .WithMany()
                        .HasForeignKey("VolunteerStudentId");

                    b.Navigation("VolunteerProgramActivity");

                    b.Navigation("VolunteerStudent");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerStudentTaskAccomplish", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.VolunteerProgramTask", "VolunteerProgramTask")
                        .WithMany()
                        .HasForeignKey("VolunteerProgramTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolunteerWorkApi.Entities.VolunteerStudent", "VolunteerStudent")
                        .WithMany()
                        .HasForeignKey("VolunteerStudentId");

                    b.Navigation("VolunteerProgramTask");

                    b.Navigation("VolunteerStudent");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerStudentWorkAttendance", b =>
                {
                    b.HasOne("VolunteerWorkApi.Entities.VolunteerProgramWorkDay", "VolunteerProgramWorkDay")
                        .WithMany()
                        .HasForeignKey("VolunteerProgramWorkDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolunteerWorkApi.Entities.VolunteerStudent", "VolunteerStudent")
                        .WithMany()
                        .HasForeignKey("VolunteerStudentId");

                    b.Navigation("VolunteerProgramWorkDay");

                    b.Navigation("VolunteerStudent");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Category", b =>
                {
                    b.Navigation("Interests");

                    b.Navigation("Skills");

                    b.Navigation("VolunteerOpportunities");

                    b.Navigation("VolunteerPrograms");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerOpportunity", b =>
                {
                    b.Navigation("VolunteerInterests");

                    b.Navigation("VolunteerSkills");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerProgram", b =>
                {
                    b.Navigation("VolunteerProgramActivities");

                    b.Navigation("VolunteerProgramGalleryPhotos");

                    b.Navigation("VolunteerProgramTasks");

                    b.Navigation("VolunteerStudents");

                    b.Navigation("VolunteerWorkDays");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.VolunteerProgramActivity", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("VolunteerWorkApi.Entities.Organization", b =>
                {
                    b.Navigation("VolunteerOpportunities");

                    b.Navigation("VolunteerPrograms");
                });
#pragma warning restore 612, 618
        }
    }
}
